---
---

<div class="fill-entire-back">
  <div class="background"></div>
</div>

<script>
  function randomRange(min: number, max: number) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }
  const colors = ["red-ish", "green-ish", "blue-ish"] as const;
  function randomColor() {
    const color = colors[Math.floor(Math.random() * colors.length)];
    const strong = randomRange(180, 255);
    const weak = () => randomRange(70, 170);
    const [weak1, weak2] = [weak(), weak()];
    switch(color) {
      case "red-ish":
        return [strong, weak1, weak2];
      case "green-ish":
        return [weak1, strong, weak2];
      case "blue-ish":
        return [weak1, weak2, strong];
      default:
        const _typeCheck: never = color;
    }
  }
  function generateRandom(parentNode: HTMLElement) {
    const width = parentNode.offsetWidth;
    const height = parentNode.offsetHeight;
    const span = document.createElement("span");
    span.classList.add("circle");

    // random position
    const [randomTop, randomLeft] = [
      Math.round(Math.random() * height),
      Math.round(Math.random() * width)
    ]
    span.style.top = `${randomTop}px`;
    span.style.left = `${randomLeft}px`;

    // random size
    span.style.setProperty("--size", `${randomRange(60, 120)}px`);
    // random color
    const [_r, _g, _b] = randomColor();
    span.style.setProperty("--bg-color", `rgb(${_r}, ${_g}, ${_b})`);
    parentNode.appendChild(span);

    // random duration time
    const t = randomRange(2, 5); // second
    span.style.setProperty("--duration-time", `${t}s`);

    // random animation delay
    const delay = randomRange(0, 2000);
    span.style.setProperty("--delay", `${delay}ms`);

    // remove element
    setTimeout(() => {
      parentNode.removeChild(span);
    }, (t * 1000) + delay + 100);
  }

  const containers = document.getElementsByClassName("fill-entire-back");
  const bgDivs = [];
  Array.prototype.forEach.call(containers, function(element) {
    const background = element.getElementsByClassName("background")[0];
    bgDivs.push(background);
  })

  let intervalId;
  function run() {
    intervalId = setInterval(() => {
      bgDivs.forEach(div => {
        if(Math.random() * 10 < 4) {
          const randomNumber = randomRange(3, 7);
          for(let i=0; i<randomNumber; i++) {
            generateRandom(div);
          }
        }
      })
    }, 1500);
  }
  function stop() {
    clearInterval(intervalId);
  }
  // Listen for visibility changes
  document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
      // Tab is inactive, stop the interval
      stop();
    } else {
      // Tab is active, start the interval
      run();
    }
  });
  // Start the interval initially
  run();
</script>

<style lang="scss">
  @import "@sass-lib/util-function";

  .fill-entire-back {
    @include fill-relative-parentnode(-99, transparent);
    overflow: hidden;
    mask-image: linear-gradient(to top, rgba(0,0,01), transparent);
    filter: brightness(.8) blur(5px);

    .background {
      @include full-width-height-relative();

      :global(.circle) {
        display: block;
        opacity: 0;
        $size: var(--size);
        background-color: var(--bg-color);
        position: absolute;
        z-index: -2;
        width: $size;
        height: $size;
        border-radius: 50%;
        translate: -50% -50%;
        animation: var(--duration-time) fade-in-out forwards;
        animation-delay: var(--delay);
      }
    }
  }
  @keyframes fade-in-out {
    0% {
      opacity: 0;
    }
    40%, 60% {
      opacity: .7;
    }
    100% {
      opacity: 0;
    }
  }
</style>